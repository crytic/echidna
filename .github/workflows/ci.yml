name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:
    name: Build Echidna
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-latest
        include:
          - os: ubuntu-20.04
            apt-get: autoconf automake libtool
          - os: macos-latest
            brew: automake

    steps:
      - name: Get Packages
        uses: mstksg/get-package@v1
        with:
          brew: ${{ matrix.brew }}
          apt-get: ${{ matrix.apt-get }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Local
        uses: actions/cache@v3
        with:
          path: ~/.local/
          key: ${{ runner.os }}-local-v4

      - name: Cache Stack
        uses: actions/cache@v3
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack-v4

      - name: Cache Cabal
        uses: actions/cache@v3
        with:
          path: ~/.cabal
          key: ${{ runner.os }}-cabal-v4

      - name: Build Libraries
        run: |
          .github/scripts/install-libsecp256k1.sh
          .github/scripts/install-libff.sh
        env:
          HOST_OS: ${{ runner.os }}

      - name: Build Dependencies
        run: |
          stack build --ghc-options="-Werror" --extra-include-dirs=$HOME/.local/include --extra-lib-dirs=$HOME/.local/lib --only-dependencies

      - name: Build and install echidna
        run: |
          stack install --flag echidna:static --ghc-options="-Werror" --extra-include-dirs=$HOME/.local/include --extra-lib-dirs=$HOME/.local/lib

      - name: Amend and compress binaries (macOS)
        if: runner.os == 'macOS'
        run: .github/scripts/build-macos-release.sh

      - name: Compress binary (Linux)
        if: runner.os == 'Linux'
        run: GZIP=-9 tar -czf echidna-test.tar.gz -C $HOME/.local/bin/ echidna-test

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: echidna-test-${{ runner.os }}
          path: echidna-test.tar.gz

      - name: Build and copy test suite
        if: runner.os == 'Linux'
        run: |
          stack build --flag echidna:static --test --no-run-tests --ghc-options="-Werror" --extra-include-dirs=$HOME/.local/include --extra-lib-dirs=$HOME/.local/lib
          cp "$(find "$PWD" -name echidna-testsuite -type f)" .

      - name: Upload testsuite
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: echidna-testsuite
          path: echidna-testsuite


  test:
    name: Test Echidna with solc ${{ matrix.solc }}
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        solc:
          - "0.4.25"
          - "0.5.7"
        experimental: [false]
        include:
          - solc: "0.6.12"
            experimental: true
          - solc: "0.7.5"
            experimental: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          .github/scripts/install-solc.sh
          .github/scripts/install-crytic-compile.sh
        env:
          HOST_OS: ${{ runner.os }}
          SOLC_VER: ${{ matrix.solc }}

      - name: Download testsuite
        uses: actions/download-artifact@v3
        with:
         name: echidna-testsuite

      - name: Test
        run: |
          export PATH="${PATH}:$HOME/.local/bin"
          cp "$HOME/.local/bin/solc-${{ matrix.solc }}" "$HOME/.local/bin/solc"
          chmod +x echidna-testsuite
          ./echidna-testsuite
